{% extends 'base.html.twig' %}

{% block title %}Modifier mon profil{% endblock %}

{% block body %}

{% for message in app.flashes('success') %}
    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
        {{ message }}
    </div>
{% endfor %}

    {{ form_start(form) }}
        <div class="grid grid-cols-1 gap-4">
        <div class="flex items-center justify-between mt-6">
    <a href="{{ path('profil_show') }}" class="flex items-center text-blue-700 font-semibold hover:underline">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
        </svg>
        Back
    </a>

    {# <div class="text-purple-600">
        <!-- Icône centrale personnalisée -->
        <svg class="w-10 h-10" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
            <path d="M12 2C10 7 14 7 14 12s-4 5-2 10" stroke-linecap="round" stroke-linejoin="round" />
            <path d="M12 2C14 7 10 7 10 12s4 5 2 10" stroke-linecap="round" stroke-linejoin="round" />
        </svg>
    </div> #}

    <button type="submit" class="text-blue-700 font-semibold hover:underline flex items-center mr-1">
        Save
        
    </button>
</div>
            {% for field in [
                form.email,
                form.username,
                form.firstName,
                form.lastName,
                form.address,
                form.postalCode,
                form.city,
                form.latitude,
                form.longitude,
                form.birthDate,
                form.phoneNumber,
                form.plainPassword.first,
                form.plainPassword.second
            ] %}
                {{ form_row(field, {
                    'attr': {
                        'class': 'w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500'
                    }
                }) }}
                
            {% endfor %}
        </div>

        

        {{ form_end(form) }}
   
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <style>
        .autocomplete-suggestions {
            background: white;
            position: absolute;
            z-index: 1000;
            max-height: 150px;
            overflow-y: auto;
            padding: 0;
            margin: 0;
            list-style: none;
            width: 50%;
        }
        .autocomplete-suggestions li {
            padding: 8px;
        }
        .autocomplete-suggestions li:hover {
            background-color: #eee;
        }
    </style>

    <script>
    document.addEventListener('DOMContentLoaded', function () {
        const input = document.querySelector('[data-autocomplete="address"]');

        if (!input) return;

        // Création et insertion de la liste des suggestions
        const suggestions = document.createElement('ul');
        suggestions.classList.add('autocomplete-suggestions');
        input.parentNode.style.position = 'relative'; // nécessaire pour positionner la liste
        input.parentNode.appendChild(suggestions);

        // Quand l'utilisateur tape dans le champ
        input.addEventListener('input', function () {
            const query = this.value;
            if (query.length < 3) {
                suggestions.innerHTML = '';
                return;
            }

            fetch('https://api-adresse.data.gouv.fr/search/?q=' + encodeURIComponent(query) + '&limit=5')
                .then(response => response.json())
                .then(data => {
                    suggestions.innerHTML = '';
                    data.features.forEach(feature => {
                        const li = document.createElement('li');
                        li.textContent = feature.properties.label;
                        li.style.cursor = 'pointer';

                        // Utilise mousedown pour que ça se déclenche avant le blur
                        li.addEventListener('mousedown', () => {
                            input.value = feature.properties.label;
                            document.querySelector('#user_profile_postalCode').value = feature.properties.postcode || '';
                            document.querySelector('#user_profile_city').value = feature.properties.city || '';
                            document.querySelector('#user_profile_latitude').value = feature.geometry.coordinates[1] || '';
                            document.querySelector('#user_profile_longitude').value = feature.geometry.coordinates[0] || '';
                            suggestions.innerHTML = ''; // On vide la liste immédiatement
                        });

                        suggestions.appendChild(li);
                    });
                });
        });

        
    });
</script>


{% endblock %}