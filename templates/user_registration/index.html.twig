{% extends 'base.html.twig' %}

{% block title %}Inscription{% endblock %}

{% block body %}
<div class="min-h-screen w-full bg-white flex flex-col justify-center px-6 py-8 sm:px-8">
<div class="sticky top-0 z-50 bg-white flex items-center justify-between mt-0 py-4 border-b border-gray-200">

  

   
        <a href="{{ path('app_landing') }}" class="flex items-center text-blue-700 font-semibold hover:underline">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
            </svg>
            Back
        </a>
 <img src="{{ asset('uploads/BloomCare.png') }}" alt="Logo" class="mx-auto h-10">
        <button type="submit" class="text-blue-700 font-semibold hover:underline flex items-center mr-1">
        Save
        
    </button>
</div>
    <div class="w-full h-full">
        <h1 class="text-3xl font-bold text-center text-gray-900 mb-6">Sign Up</h1>

        <div class="flex justify-center mb-6 border-b border-gray-300">
            
            
        </div>

        {% for flash in app.flashes('success') %}
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
                {{ flash }}
            </div>
        {% endfor %}

        {{ form_start(registrationForm) }}
        <div class="grid grid-cols-1 gap-4">
            {% for field in [
                registrationForm.email,
                registrationForm.username,
                registrationForm.firstName,
                registrationForm.lastName,
                registrationForm.streetNumber,
                registrationForm.streetName,
                registrationForm.addressComplement,
                registrationForm.address,
                registrationForm.postalCode,
                registrationForm.city,
                registrationForm.latitude,
                registrationForm.longitude,
                registrationForm.birthDate,
                registrationForm.phoneNumber,
                registrationForm.plainPassword.first,
                registrationForm.plainPassword.second
            ] %}
                {{ form_row(field, {
                    'attr': {
                        'class': 'w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500'
                    }
                }) }}
                
            {% endfor %}
        </div>

        
        {{ form_end(registrationForm) }}
    </div>
</div>
{% endblock %}



{% block javascripts %}
    {{ parent() }}
    <style>
        .autocomplete-suggestions {
            background: white;
            position: absolute;
            z-index: 1000;
            max-height: 150px;
            overflow-y: auto;
            padding: 0;
            margin: 0;
            list-style: none;
            width: 50%;
        }
        .autocomplete-suggestions li {
            padding: 8px;
        }
        .autocomplete-suggestions li:hover {
            background-color: #eee;
        }
    </style>

    <script>
    function initRegistrationAutocomplete() {
        const input = document.querySelector('[data-autocomplete="address"]');
        if (!input) return;

        input.setAttribute('autocomplete', 'off');

        // Supprimer les suggestions précédentes s’il y en avait
        const oldSuggestions = input.parentNode.querySelector('.autocomplete-suggestions');
        if (oldSuggestions) oldSuggestions.remove();

        const suggestions = document.createElement('ul');
        suggestions.classList.add('autocomplete-suggestions');
        input.parentNode.style.position = 'relative';
        input.parentNode.appendChild(suggestions);

        input.addEventListener('input', function () {
            const query = this.value;
            if (query.length < 3) {
                suggestions.innerHTML = '';
                return;
            }

            fetch('https://api-adresse.data.gouv.fr/search/?q=' + encodeURIComponent(query) + '&limit=5')
                .then(response => response.json())
                .then(data => {
                    suggestions.innerHTML = '';
                    data.features.forEach(feature => {
                        const li = document.createElement('li');
                        li.textContent = feature.properties.label;
                        li.style.cursor = 'pointer';

                        li.addEventListener('click', () => {
                            input.value = feature.properties.label;
                            document.querySelector('#user_registration_form_postalCode').value = feature.properties.postcode || '';
                            document.querySelector('#user_registration_form_city').value = feature.properties.city || '';
                            document.querySelector('#user_registration_form_latitude').value = feature.geometry.coordinates[1] || '';
                            document.querySelector('#user_registration_form_longitude').value = feature.geometry.coordinates[0] || '';

                            const streetNumberField = document.querySelector('#user_registration_form_streetNumber');
                            const streetNameField = document.querySelector('#user_registration_form_streetName');
                            streetNumberField.value = feature.properties.housenumber || '';
                            streetNameField.value = feature.properties.street || '';

                            suggestions.innerHTML = '';
                        });

                        suggestions.appendChild(li);
                    });
                });
        });
    }

    // Exécute l'autocomplétion à l'ouverture initiale
    document.addEventListener('DOMContentLoaded', initRegistrationAutocomplete);
    document.addEventListener('turbo:load', initRegistrationAutocomplete);
</script>

{% endblock %}
