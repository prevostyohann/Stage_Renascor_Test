{% extends 'base.html.twig' %}

{% block title %}Ajouter un service{% endblock %}

{% block body %}
{% for message in app.flashes('success') %}
    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
        {{ message }}
    </div>
{% endfor %}
{% for message in app.flashes('error') %}
    <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
        {{ message }}
    </div>
{% endfor %}
<div class="flex items-center justify-between mt-6">
    {% set back_route = is_granted('ROLE_CLIENT') ? 'client_home' : (is_granted('ROLE_PRO') ? 'services' : null) %}
    {% if back_route %}
        <a href="{{ path(back_route, {'id_off': office.id}) }}" class="flex items-center text-blue-700 font-semibold hover:underline">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
            </svg>
            Back
        </a>
        <img src="{{ asset('uploads/BloomCare.png') }}" alt="Logo" class="mx-auto h-10">
    {% endif %}
</div>  


 {{ form_start(form) }}

    {% for field in form %}
        <div class="mb-4">
           {% if field.vars.name != '_token' %}
            {{ form_label(field, null, {'label_attr': {'class': 'block mb-1 font-medium'}}) }}
            {{ form_widget(field, {'attr': {'class': 'w-full border-gray-300 rounded px-3 py-2'}}) }}
            
         {% endif %}
        </div>
    {% endfor %}

    <div class="flex justify-end">
        <button type="submit" class="bg-purple-600 hover:bg-purple-700 text-white font-semibold px-4 py-2 rounded">
            Enregistrer
        </button>
    </div>

    {{ form_end(form) }}

<script>
document.addEventListener('DOMContentLoaded', function () {
    const specialitySelect = document.querySelector('#office_type_of_service_speciality');
    const serviceSelect = document.querySelector('#office_type_of_service_typeOfService');

    // Masquer toutes les options au début
    const allOptions = Array.from(serviceSelect.options);
    serviceSelect.innerHTML = '<option value="">Veuillez d\'abord choisir une spécialité</option>';
    serviceSelect.disabled = true;

    specialitySelect.addEventListener('change', function () {
        const specialityId = this.value;

        if (!specialityId) {
            serviceSelect.innerHTML = '<option value="">Veuillez d\'abord choisir une spécialité</option>';
            serviceSelect.disabled = true;
            return;
        }

        serviceSelect.innerHTML = '<option>Chargement...</option>';
        serviceSelect.disabled = true;

        fetch('/api/services/' + specialityId)
            .then(response => response.json())
            .then(data => {
                // Remet toutes les options de base, puis filtre
                serviceSelect.innerHTML = '';

                const allowedIds = data.map(service => String(service.id));

                allOptions.forEach(opt => {
                    if (allowedIds.includes(opt.value)) {
                        serviceSelect.appendChild(opt);
                    }
                });

                if (serviceSelect.options.length === 0) {
                    serviceSelect.innerHTML = '<option value="">Aucun service disponible</option>';
                    serviceSelect.disabled = true;
                } else {
                    serviceSelect.disabled = false;
                }
            });
    });
});
</script>


{% endblock %}